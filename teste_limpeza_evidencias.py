#!/usr/bin/env python3
"""
Teste para verificar a funcionalidade de limpeza de evid√™ncias
"""

import requests
import time
from bs4 import BeautifulSoup
import json

class TesteLimpezaEvidencias:
    def __init__(self):
        self.base_url = "http://localhost:8081"
        self.session = requests.Session()
        
    def log_teste(self, nome_teste, sucesso, detalhes=""):
        status = "‚úÖ PASSOU" if sucesso else "‚ùå FALHOU"
        print(f"{status} - {nome_teste}: {detalhes}")
        return sucesso
        
    def testar_limpeza_evidencias(self):
        """Testa se a limpeza de evid√™ncias funciona corretamente"""
        print("üß™ TESTANDO LIMPEZA DE EVID√äNCIAS")
        print("=" * 50)
        
        try:
            # 1. Acessar p√°gina de evid√™ncias
            response = self.session.get(f"{self.base_url}/evidencias")
            if not response.ok:
                return self.log_teste("Acesso √† p√°gina", False, f"Status: {response.status_code}")
            
            self.log_teste("Acesso √† p√°gina", True, "P√°gina carregada com sucesso")
            
            # 2. Verificar se o JavaScript est√° carregado
            soup = BeautifulSoup(response.content, 'html.parser')
            app_js = soup.find('script', src=lambda x: x and 'app.js' in x)
            if not app_js:
                return self.log_teste("JavaScript", False, "app.js n√£o encontrado")
            
            self.log_teste("JavaScript", True, "app.js carregado")
            
            # 3. Verificar se a fun√ß√£o de limpeza existe no c√≥digo
            js_response = self.session.get(f"{self.base_url}/static/js/app.js")
            if js_response.ok:
                js_content = js_response.text
                if "limparEvidenciasAnteriores" in js_content:
                    self.log_teste("Fun√ß√£o de limpeza", True, "Fun√ß√£o encontrada no JavaScript")
                else:
                    return self.log_teste("Fun√ß√£o de limpeza", False, "Fun√ß√£o n√£o encontrada")
            else:
                return self.log_teste("Carregamento JS", False, f"Status: {js_response.status_code}")
            
            # 4. Verificar se a fun√ß√£o √© chamada no processamento
            if "limparEvidenciasAnteriores()" in js_content:
                self.log_teste("Chamada da fun√ß√£o", True, "Fun√ß√£o √© chamada no processamento")
            else:
                return self.log_teste("Chamada da fun√ß√£o", False, "Fun√ß√£o n√£o √© chamada")
            
            # 5. Verificar se a fun√ß√£o √© chamada ao selecionar arquivo
            if "processarArquivo" in js_content and "limparEvidenciasAnteriores" in js_content:
                self.log_teste("Limpeza ao selecionar arquivo", True, "Limpeza implementada")
            else:
                return self.log_teste("Limpeza ao selecionar arquivo", False, "Limpeza n√£o implementada")
            
            # 6. Verificar se a fun√ß√£o √© chamada no reset do modal
            if "resetarModalEvidencias" in js_content and "limparEvidenciasAnteriores" in js_content:
                self.log_teste("Limpeza no reset do modal", True, "Limpeza implementada")
            else:
                return self.log_teste("Limpeza no reset do modal", False, "Limpeza n√£o implementada")
            
            print("\nüéâ TODOS OS TESTES PASSARAM!")
            return True
            
        except Exception as e:
            self.log_teste("Teste geral", False, str(e))
            return False

def main():
    print("üöÄ INICIANDO TESTE DE LIMPEZA DE EVID√äNCIAS")
    print("=" * 60)
    
    teste = TesteLimpezaEvidencias()
    sucesso = teste.testar_limpeza_evidencias()
    
    print("\n" + "=" * 60)
    if sucesso:
        print("‚úÖ TESTE CONCLU√çDO COM SUCESSO")
        print("üìã Resumo:")
        print("   - Fun√ß√£o de limpeza implementada")
        print("   - Limpeza autom√°tica ao selecionar novo arquivo")
        print("   - Limpeza autom√°tica ao iniciar processamento")
        print("   - Limpeza autom√°tica no reset do modal")
        print("   - JavaScript carregado corretamente")
    else:
        print("‚ùå TESTE FALHOU")
        print("üîß Verifique os erros acima e corrija os problemas")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
