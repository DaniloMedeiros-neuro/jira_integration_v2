#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ Teste Automatizado - Fase 6: Finaliza√ß√£o SB Admin 2
Testa todas as funcionalidades da aplica√ß√£o para garantir que est√° pronta para produ√ß√£o.
"""

import requests
import time
import json
from bs4 import BeautifulSoup
import os

class TesteFinalizacao:
    def __init__(self, base_url="http://localhost:8081"):
        self.base_url = base_url
        self.session = requests.Session()
        self.resultados = {
            "sucessos": 0,
            "falhas": 0,
            "detalhes": []
        }
    
    def log_teste(self, nome, sucesso, detalhes=""):
        """Registra resultado de um teste"""
        status = "‚úÖ SUCESSO" if sucesso else "‚ùå FALHA"
        print(f"{status} - {nome}")
        if detalhes:
            print(f"   üìù {detalhes}")
        
        self.resultados["sucessos" if sucesso else "falhas"] += 1
        self.resultados["detalhes"].append({
            "nome": nome,
            "sucesso": sucesso,
            "detalhes": detalhes
        })
    
    def testar_conectividade(self):
        """Testa se o servidor est√° respondendo"""
        try:
            response = self.session.get(self.base_url, timeout=5)
            sucesso = response.status_code == 200
            self.log_teste("Conectividade do Servidor", sucesso, 
                          f"Status: {response.status_code}")
            return sucesso
        except Exception as e:
            self.log_teste("Conectividade do Servidor", False, str(e))
            return False
    
    def testar_pagina_principal(self):
        """Testa a p√°gina principal (index.html)"""
        try:
            response = self.session.get(self.base_url)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Verificar elementos essenciais
            titulo = soup.find('title')
            sidebar = soup.find('ul', class_='navbar-nav')
            topbar = soup.find('nav', class_='navbar')
            search_input = soup.find('input', {'id': 'requisitoPai'})
            
            sucesso = all([titulo, sidebar, topbar, search_input])
            self.log_teste("P√°gina Principal", sucesso, 
                          f"T√≠tulo: {titulo.text if titulo else 'N/A'}")
            return sucesso
        except Exception as e:
            self.log_teste("P√°gina Principal", False, str(e))
            return False
    
    def testar_assets_css(self):
        """Testa se os arquivos CSS est√£o carregando"""
        assets_css = [
            "/static/css/sb-admin-2.min.css",
            "/static/css/sb-admin-2-custom.css",
            "/static/css/style.css"
        ]
        
        sucessos = 0
        for asset in assets_css:
            try:
                response = self.session.get(f"{self.base_url}{asset}")
                if response.status_code == 200:
                    sucessos += 1
                else:
                    print(f"   ‚ö†Ô∏è  Asset n√£o encontrado: {asset}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erro ao carregar {asset}: {e}")
        
        sucesso = sucessos == len(assets_css)
        self.log_teste("Assets CSS", sucesso, 
                      f"{sucessos}/{len(assets_css)} carregados")
        return sucesso
    
    def testar_assets_js(self):
        """Testa se os arquivos JavaScript est√£o carregando"""
        assets_js = [
            "/static/js/sb-admin-2.min.js",
            "/static/js/sb-admin-2-custom.js",
            "/static/js/app.js"
        ]
        
        sucessos = 0
        for asset in assets_js:
            try:
                response = self.session.get(f"{self.base_url}{asset}")
                if response.status_code == 200:
                    sucessos += 1
                else:
                    print(f"   ‚ö†Ô∏è  Asset n√£o encontrado: {asset}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erro ao carregar {asset}: {e}")
        
        sucesso = sucessos == len(assets_js)
        self.log_teste("Assets JavaScript", sucesso, 
                      f"{sucessos}/{len(assets_js)} carregados")
        return sucesso
    
    def testar_paginas_principais(self):
        """Testa todas as p√°ginas principais"""
        paginas = [
            ("/", "Dashboard"),
            ("/evidencias", "Evid√™ncias"),
            ("/metricas", "M√©tricas"),
            ("/configuracoes", "Configura√ß√µes"),
            ("/planilha-manual", "Planilha Manual")
        ]
        
        sucessos = 0
        for url, nome in paginas:
            try:
                response = self.session.get(f"{self.base_url}{url}")
                if response.status_code == 200:
                    sucessos += 1
                    print(f"   ‚úÖ {nome}: OK")
                else:
                    print(f"   ‚ùå {nome}: Status {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå {nome}: {e}")
        
        sucesso = sucessos == len(paginas)
        self.log_teste("P√°ginas Principais", sucesso, 
                      f"{sucessos}/{len(paginas)} acess√≠veis")
        return sucesso
    
    def testar_api_busca(self):
        """Testa a API de busca de casos de teste"""
        try:
            # Teste com um requisito v√°lido (BC-8)
            payload = {"requisito": "BC-8"}
            response = self.session.post(f"{self.base_url}/buscar", 
                                       json=payload, timeout=10)
            
            sucesso = response.status_code in [200, 404]  # 404 √© aceit√°vel se n√£o encontrar
            self.log_teste("API de Busca", sucesso, 
                          f"Status: {response.status_code}")
            return sucesso
        except Exception as e:
            self.log_teste("API de Busca", False, str(e))
            return False
    
    def testar_responsividade_css(self):
        """Verifica se h√° CSS responsivo"""
        try:
            response = self.session.get(f"{self.base_url}/static/css/sb-admin-2.min.css")
            css_content = response.text
            
            # Verificar media queries responsivas
            media_queries = [
                "@media (max-width:",
                "@media (min-width:",
                "col-lg-",
                "col-md-",
                "col-sm-"
            ]
            
            encontrados = sum(1 for query in media_queries if query in css_content)
            sucesso = encontrados >= 3  # Pelo menos 3 indicadores de responsividade
            
            self.log_teste("CSS Responsivo", sucesso, 
                          f"{encontrados} indicadores encontrados")
            return sucesso
        except Exception as e:
            self.log_teste("CSS Responsivo", False, str(e))
            return False
    
    def testar_tempo_carregamento(self):
        """Testa o tempo de carregamento da p√°gina principal"""
        try:
            start_time = time.time()
            response = self.session.get(self.base_url, timeout=10)
            end_time = time.time()
            
            tempo_carregamento = end_time - start_time
            sucesso = tempo_carregamento < 3.0  # Menos de 3 segundos
            
            self.log_teste("Tempo de Carregamento", sucesso, 
                          f"{tempo_carregamento:.2f}s")
            return sucesso
        except Exception as e:
            self.log_teste("Tempo de Carregamento", False, str(e))
            return False
    
    def executar_todos_testes(self):
        """Executa todos os testes"""
        print("üß™ INICIANDO TESTES DA FASE 6 - FINALIZA√á√ÉO")
        print("=" * 60)
        
        testes = [
            self.testar_conectividade,
            self.testar_pagina_principal,
            self.testar_assets_css,
            self.testar_assets_js,
            self.testar_paginas_principais,
            self.testar_api_busca,
            self.testar_responsividade_css,
            self.testar_tempo_carregamento
        ]
        
        for teste in testes:
            try:
                teste()
                time.sleep(0.5)  # Pequena pausa entre testes
            except Exception as e:
                print(f"‚ùå ERRO NO TESTE: {e}")
        
        self.mostrar_resultados()
    
    def mostrar_resultados(self):
        """Mostra resumo dos resultados"""
        print("\n" + "=" * 60)
        print("üìä RESULTADOS DOS TESTES")
        print("=" * 60)
        
        total = self.resultados["sucessos"] + self.resultados["falhas"]
        percentual = (self.resultados["sucessos"] / total * 100) if total > 0 else 0
        
        print(f"‚úÖ Sucessos: {self.resultados['sucessos']}")
        print(f"‚ùå Falhas: {self.resultados['falhas']}")
        print(f"üìà Percentual de Sucesso: {percentual:.1f}%")
        
        if self.resultados["falhas"] > 0:
            print("\nüîç DETALHES DAS FALHAS:")
            for detalhe in self.resultados["detalhes"]:
                if not detalhe["sucesso"]:
                    print(f"   ‚ùå {detalhe['nome']}: {detalhe['detalhes']}")
        
        print("\nüéØ RECOMENDA√á√ïES:")
        if percentual >= 90:
            print("   üéâ Excelente! A aplica√ß√£o est√° pronta para produ√ß√£o.")
        elif percentual >= 75:
            print("   ‚ö†Ô∏è  Bom, mas alguns ajustes s√£o necess√°rios.")
        else:
            print("   üö® Problemas significativos encontrados. Revis√£o necess√°ria.")
        
        print("\n" + "=" * 60)

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Teste de Finaliza√ß√£o - SB Admin 2")
    print("Verificando se a aplica√ß√£o est√° pronta para produ√ß√£o...")
    
    tester = TesteFinalizacao()
    tester.executar_todos_testes()

if __name__ == "__main__":
    main()
